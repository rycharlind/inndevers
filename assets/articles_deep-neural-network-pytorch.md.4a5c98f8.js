import{_ as s,c as n,o as a,a as e}from"./app.2c8f7a41.js";const C=JSON.parse('{"title":"Deep Neural Network example in PyTorch.","description":"PyTorch is a powerful open source deep learning library used for both research and production. It provides a variety of tools to help data scientists and AI engineers create and deploy deep learning models quickly. In this tutorial, we will create a deep neural network (DNN) using PyTorch and explore how to use it to solve complex problems.","frontmatter":{"title":"Deep Neural Network example in PyTorch.","description":"PyTorch is a powerful open source deep learning library used for both research and production. It provides a variety of tools to help data scientists and AI engineers create and deploy deep learning models quickly. In this tutorial, we will create a deep neural network (DNN) using PyTorch and explore how to use it to solve complex problems.","head":[["meta",{"name":"description","content":"PyTorch is a powerful open source deep learning library used for both research and production. It provides a variety of tools to help data scientists and AI engineers create and deploy deep learning models quickly. In this tutorial, we will create a deep neural network (DNN) using PyTorch and explore how to use it to solve complex problems."}],["meta",{"name":"keywords","content":"python pytorch machine-learning"}]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Step 1: Import the Necessary Libraries","slug":"step-1-import-the-necessary-libraries","link":"#step-1-import-the-necessary-libraries","children":[]},{"level":2,"title":"Step 2: Define the Neural Network Architecture","slug":"step-2-define-the-neural-network-architecture","link":"#step-2-define-the-neural-network-architecture","children":[]},{"level":2,"title":"Step 3: Instantiate the Network","slug":"step-3-instantiate-the-network","link":"#step-3-instantiate-the-network","children":[]},{"level":2,"title":"Step 4: Define the Loss Function and Optimizer","slug":"step-4-define-the-loss-function-and-optimizer","link":"#step-4-define-the-loss-function-and-optimizer","children":[]},{"level":2,"title":"Step 5: Train the Network","slug":"step-5-train-the-network","link":"#step-5-train-the-network","children":[]},{"level":2,"title":"Step 6: Test the Network","slug":"step-6-test-the-network","link":"#step-6-test-the-network","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"relativePath":"articles/deep-neural-network-pytorch.md"}'),l={name:"articles/deep-neural-network-pytorch.md"},p=e(`<h1 id="deep-neural-network-example-in-pytorch" tabindex="-1">Deep Neural Network example in PyTorch. <a class="header-anchor" href="#deep-neural-network-example-in-pytorch" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>PyTorch is a powerful open source deep learning library used for both research and production. It provides a variety of tools to help data scientists and AI engineers create and deploy deep learning models quickly. In this tutorial, we will create a deep neural network (DNN) using PyTorch and explore how to use it to solve complex problems.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a></h2><p>Before we get started, let&#39;s make sure you have the necessary tools installed. You will need the following:</p><ul><li><a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python 3.6+</a></li><li><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noreferrer">PyTorch 1.3+</a></li></ul><h2 id="step-1-import-the-necessary-libraries" tabindex="-1">Step 1: Import the Necessary Libraries <a class="header-anchor" href="#step-1-import-the-necessary-libraries" aria-hidden="true">#</a></h2><p>In this step, we will import the PyTorch libraries, as well as any other libraries we may need for our application.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> torch</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nn</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> nn</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">optim</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> optim</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="step-2-define-the-neural-network-architecture" tabindex="-1">Step 2: Define the Neural Network Architecture <a class="header-anchor" href="#step-2-define-the-neural-network-architecture" aria-hidden="true">#</a></h2><p>Now, we will define the architecture of our neural network. In this example, we&#39;ll use a simple feed-forward network with three hidden layers and one output layer.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Define the network architecture</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Net</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">nn</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Module</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Net</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fc1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Linear</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">out_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">256</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fc2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Linear</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">256</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">out_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fc3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Linear</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">out_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fc4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Linear</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">out_features</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">forward</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sigmoid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fc1</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sigmoid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fc2</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sigmoid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fc3</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fc4</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="step-3-instantiate-the-network" tabindex="-1">Step 3: Instantiate the Network <a class="header-anchor" href="#step-3-instantiate-the-network" aria-hidden="true">#</a></h2><p>Now that we have defined the architecture of our network, we can instantiate it.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Instantiate the network</span></span>
<span class="line"><span style="color:#A6ACCD;">model </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Net</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="step-4-define-the-loss-function-and-optimizer" tabindex="-1">Step 4: Define the Loss Function and Optimizer <a class="header-anchor" href="#step-4-define-the-loss-function-and-optimizer" aria-hidden="true">#</a></h2><p>Next, we will define a loss function and optimizer for our network. In this example, we will use the cross-entropy loss and the Adam optimizer.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Define the loss function and optimizer</span></span>
<span class="line"><span style="color:#A6ACCD;">criterion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CrossEntropyLoss</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">optimizer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> optim</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Adam</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parameters</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">lr</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="step-5-train-the-network" tabindex="-1">Step 5: Train the Network <a class="header-anchor" href="#step-5-train-the-network" aria-hidden="true">#</a></h2><p>Now, we can train our network. We will loop through the training data, make predictions, calculate the loss, and backpropagate the gradients to update the weights.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Train the network</span></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> epoch </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    running_loss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumerate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">trainloader</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Get the inputs</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> labels </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Zero the parameter gradients</span></span>
<span class="line"><span style="color:#A6ACCD;">        optimizer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zero_grad</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Forward pass</span></span>
<span class="line"><span style="color:#A6ACCD;">        outputs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Calculate the loss</span></span>
<span class="line"><span style="color:#A6ACCD;">        loss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">criterion</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">outputs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> labels</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Backward pass</span></span>
<span class="line"><span style="color:#A6ACCD;">        loss</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">backward</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Optimize</span></span>
<span class="line"><span style="color:#A6ACCD;">        optimizer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># Print statistics</span></span>
<span class="line"><span style="color:#A6ACCD;">        running_loss </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> loss</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">item</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1999</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[</span><span style="color:#F78C6C;">%d</span><span style="color:#C3E88D;">, </span><span style="color:#F78C6C;">%5d</span><span style="color:#C3E88D;">] loss: </span><span style="color:#F78C6C;">%.3f</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">%</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">epoch </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> running_loss </span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">            running_loss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="step-6-test-the-network" tabindex="-1">Step 6: Test the Network <a class="header-anchor" href="#step-6-test-the-network" aria-hidden="true">#</a></h2><p>Now that we have trained our network, we can test it on the test data.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Test the network</span></span>
<span class="line"><span style="color:#A6ACCD;">correct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">total </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">no_grad</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> testloader</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        images</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> labels </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span></span>
<span class="line"><span style="color:#A6ACCD;">        outputs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">images</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> predicted </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">outputs</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        total </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> labels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        correct </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">predicted </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> labels</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">item</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Accuracy of the network on the 10000 test images: </span><span style="color:#F78C6C;">%d</span><span style="color:#C3E88D;"> </span><span style="color:#F78C6C;">%%</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">%</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> correct </span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;"> total</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>In this tutorial, we learned how to create a deep neural network using PyTorch. We explored how to define the architecture, create the model, define the loss function and optimizer, and train and test the network. With this knowledge, you can now use PyTorch to create deep learning models for a variety of tasks. Happy coding!</p>`,26),o=[p];function r(t,c,i,F,y,D){return a(),n("div",null,o)}const d=s(l,[["render",r]]);export{C as __pageData,d as default};
